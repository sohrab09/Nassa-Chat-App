{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Register.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","animations/robot.gif","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","components/Authentication/Signup.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","show","setShow","toast","useToast","employeeId","setEmployeeId","password","setPassword","loading","setLoading","history","useHistory","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","push","description","response","message","spacing","id","isRequired","value","placeholder","onChange","e","target","size","type","width","h","onClick","colorScheme","style","marginTop","isLoading","Register","action","onSubmit","preventDefault","url","fetch","then","json","console","log","state","EmployeeId","name","FullName","email","OfficeEmail","image","Image","mobileNumber","MobileNo","alert","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","maxW","centerContent","d","justifyContent","p","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","variant","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","base","icon","View","isCentered","flexDir","alignItems","boxSize","src","alt","md","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","pic","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","flexDirection","height","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","textAlign","Robot","Chatbox","ChatLoading","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","paddingBottom","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","rightIcon","ChevronDown","removeItem","borderBottomWidth","Chatpage","Signup","handleClick","EmployeeInfo","useLocation","setName","setEmail","setMobileNumber","confirmpassword","setConfirmpassword","disabled","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"q3MA8GeA,EArGD,WACZ,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAQC,cACd,EAAoCJ,qBAApC,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAgCN,qBAAhC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAEMC,EAAUC,cAEVC,EAAa,uCAAG,gCAAAC,EAAA,yDACpBJ,GAAW,GACNL,GAAeE,EAFA,uBAGlBJ,EAAM,CACJY,MAAO,6BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZT,GAAW,GAVO,0CAgBZU,EAAS,CACbC,QAAS,CACP,eAAgB,qBAlBF,SAsBKC,IAAMC,KAC3B,kBACA,CAAElB,aAAYE,YACda,GAzBgB,gBAsBVI,EAtBU,EAsBVA,KAORrB,EAAM,CACJY,MAAO,mBACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZM,aAAaC,QAAQ,WAAYC,KAAKC,UAAUJ,IAChDd,GAAW,GACXC,EAAQkB,KAAK,UAtCK,kDAwClB1B,EAAM,CACJY,MAAO,iBACPe,YAAa,KAAMC,SAASP,KAAKQ,QACjChB,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZT,GAAW,GAhDO,0DAAH,qDAoDnB,OACE,eAAC,IAAD,CAAQuB,QAAQ,OAAhB,UACE,eAAC,IAAD,CAAaC,GAAG,cAAcC,YAAU,EAAxC,UACE,cAAC,IAAD,0BACA,cAAC,IAAD,CACEC,MAAO/B,EACPgC,YAAY,+BACZC,SAAU,SAACC,GAAD,OAAOjC,EAAciC,EAAEC,OAAOJ,aAG5C,eAAC,IAAD,CAAaF,GAAG,WAAWC,YAAU,EAArC,UACE,cAAC,IAAD,uBACA,eAAC,IAAD,CAAYM,KAAK,KAAjB,UACE,cAAC,IAAD,CACEL,MAAO7B,EACP+B,SAAU,SAACC,GAAD,OAAO/B,EAAY+B,EAAEC,OAAOJ,QACtCM,KAAMzC,EAAO,OAAS,WACtBoC,YAAY,mBAEd,cAAC,IAAD,CAAmBM,MAAM,SAAzB,SACE,cAAC,IAAD,CAAQC,EAAE,UAAUH,KAAK,KAAKI,QAhFpB,kBAAM3C,GAASD,IAgFzB,SACGA,EAAO,OAAS,iBAKzB,cAAC,IAAD,CACE6C,YAAY,OACZH,MAAM,OACNI,MAAO,CAAEC,UAAW,IACpBH,QAAShC,EACToC,UAAWxC,EALb,uBC3BSyC,EA/DE,WAEf,IAAMvC,EAAUC,cAChB,EAAoCZ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAmCA,OACE,sBAAM6C,OAAO,GAAGC,SAAU,SAACb,GAAD,OA7BX,SAACA,GAEhB,GAAmB,KAAflC,EAAJ,CAKAkC,EAAEc,iBACF,IAAMC,EAAG,4EAAwEjD,GACjFkD,MAAMD,GACHE,MAAK,SAAAzB,GAAQ,OAAIA,EAAS0B,UAC1BD,MAAK,SAAAhC,GACJkC,QAAQC,IAAInC,GACZlB,EAAcD,GACdM,EAAQkB,KAAK,UACX,CACE+B,MACA,CACEvD,WAAYmB,EAAKqC,WACjBC,KAAMtC,EAAKuC,SACXC,MAAOxC,EAAKyC,YACZC,MAAO1C,EAAK2C,MACZC,aAAc5C,EAAK6C,oBAnB3BC,MAAM,iCA0ByBlB,CAASb,IAA1C,SACE,eAAC,IAAD,CAAQN,QAAQ,MAAhB,UACE,eAAC,IAAD,CAAaC,GAAG,cAAcC,YAAU,EAAxC,UACE,cAAC,IAAD,0BACA,cAAC,IAAD,CACEE,YAAY,+BACZyB,KAAK,aACL1B,MAAO/B,EACPiC,SA1CO,SAACC,GAChBjC,EAAciC,EAAEC,OAAOJ,aA4CnB,cAAC,IAAD,CACEU,YAAY,OACZH,MAAM,OACNI,MAAO,CAAEC,UAAW,IACpBN,KAAK,SAJP,4BCIO6B,IC3CXC,EAAQC,ED2CGF,EA7Cf,WACE,IAAM5D,EAAUC,cAQhB,OANA8D,qBAAU,WACK/C,KAAKgD,MAAMlD,aAAamD,QAAQ,cAEnCjE,EAAQkB,KAAK,YACtB,CAAClB,IAGF,eAAC,IAAD,CAAWkE,KAAK,KAAKC,eAAa,EAAlC,UACE,cAAC,IAAD,CACEC,EAAE,OACFC,eAAe,SACfC,EAAG,EACHC,GAAG,QACHC,EAAE,OACFC,EAAE,gBACFC,aAAa,KACbC,YAAY,MARd,SAUE,cAAC,IAAD,CAAMC,SAAS,MAAMC,WAAW,YAAhC,sBAIF,cAAC,IAAD,CAAKN,GAAG,QAAQC,EAAE,OAAOF,EAAG,EAAGI,aAAa,KAAKC,YAAY,MAA7D,SACE,eAAC,IAAD,CAAMG,UAAQ,EAACC,QAAQ,eAAvB,UACE,eAAC,IAAD,CAASC,GAAG,MAAZ,UACE,cAAC,IAAD,oBACA,cAAC,IAAD,0BAEF,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,EAAD,MAEF,cAAC,IAAD,UACE,cAAC,EAAD,kB,mCEpDDC,EAAqB,SAACC,EAAUT,EAAGU,EAAGC,GAGjD,OACED,EAAID,EAASG,OAAS,GACtBH,EAASC,EAAI,GAAGG,OAAOC,MAAQd,EAAEa,OAAOC,KACxCL,EAASC,GAAGG,OAAOC,MAAQH,EAEpB,GAEND,EAAID,EAASG,OAAS,GACrBH,EAASC,EAAI,GAAGG,OAAOC,MAAQd,EAAEa,OAAOC,KACxCL,EAASC,GAAGG,OAAOC,MAAQH,GAC5BD,IAAMD,EAASG,OAAS,GAAKH,EAASC,GAAGG,OAAOC,MAAQH,EAElD,EACG,QAGDI,EAAe,SAACN,EAAUT,EAAGU,EAAGC,GAC3C,OACED,EAAID,EAASG,OAAS,IACrBH,EAASC,EAAI,GAAGG,OAAOC,MAAQd,EAAEa,OAAOC,UACRE,IAA/BP,EAASC,EAAI,GAAGG,OAAOC,MACzBL,EAASC,GAAGG,OAAOC,MAAQH,GAIlBM,EAAgB,SAACR,EAAUC,EAAGC,GACzC,OACED,IAAMD,EAASG,OAAS,GACxBH,EAASA,EAASG,OAAS,GAAGC,OAAOC,MAAQH,GAC7CF,EAASA,EAASG,OAAS,GAAGC,OAAOC,KAI5BI,EAAa,SAACT,EAAUT,EAAGU,GACtC,OAAOA,EAAI,GAAKD,EAASC,EAAI,GAAGG,OAAOC,MAAQd,EAAEa,OAAOC,KAG7CK,EAAY,SAACC,EAAYC,GACpC,OAAOA,EAAM,GAAGP,MAAQM,EAAWN,IAAMO,EAAM,GAAG3C,KAAO2C,EAAM,GAAG3C,M,4CCwBrD4C,EAjDM,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC5B,EAAoCC,cAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QAExB,OACE,qCACGJ,EACC,sBAAM/D,QAASkE,EAAf,SAAwBH,IAExB,cAAC,IAAD,CAAY7B,EAAG,CAAEkC,KAAM,QAAUC,KAAM,cAACC,EAAA,EAAD,IAActE,QAASkE,IAEhE,eAAC,IAAD,CAAOtE,KAAK,KAAKuE,QAASA,EAASF,OAAQA,EAAQM,YAAU,EAA7D,UACE,cAAC,IAAD,IACA,eAAC,IAAD,CAAcxE,EAAE,QAAhB,UACE,cAAC,IAAD,CACE2C,SAAS,OACTC,WAAW,YACXT,EAAE,OACFC,eAAe,SAJjB,SAMG2B,EAAK7C,OAER,cAAC,IAAD,IACA,eAAC,IAAD,CACEiB,EAAE,OACFsC,QAAQ,SACRC,WAAW,SACXtC,eAAe,gBAJjB,UAME,cAAC,IAAD,CACEK,aAAa,OACbkC,QAAQ,QACRC,IAAG,kDAA6Cb,EAAKtG,WAAlD,QAAoEoH,IAAKd,EAAK7C,KAAMf,MAAO,CAAEsC,aAAc,SAEhH,eAAC,IAAD,CACEE,SAAU,CAAE0B,KAAM,OAAQS,GAAI,QAC9BlC,WAAW,YAFb,oBAIUmB,EAAK3C,sB,2BClDrB2D,EAAcC,0BAoCPC,EAAY,WACvB,OAAOC,qBAAWH,IAGLI,EAtCM,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SACtB,EAAwC5G,qBAAxC,mBAAOgI,EAAP,KAAqBC,EAArB,KACA,EAAwBjI,qBAAxB,mBAAO2G,EAAP,KAAauB,EAAb,KACA,EAAwClI,mBAAS,IAAjD,mBAAOmI,EAAP,KAAqBC,EAArB,KACA,EAA0BpI,qBAA1B,mBAAOqI,EAAP,KAAcC,EAAd,KAEM3H,EAAUC,cAUhB,OARA8D,qBAAU,WACR,IAAM6D,EAAW5G,KAAKgD,MAAMlD,aAAamD,QAAQ,aACjDsD,EAAQK,GAEHA,GAAU5H,EAAQkB,KAAK,OAE3B,CAAClB,IAGF,cAACgH,EAAYa,SAAb,CACEpG,MAAO,CACL4F,eACAC,kBACAtB,OACAuB,UACAC,eACAC,kBACAC,QACAC,YATJ,SAYG1B,KCkBQ6B,EAzCQ,SAAC,GAAkB,IAAhB5C,EAAe,EAAfA,SAChBc,EAASkB,IAATlB,KAER,OACE,cAAC,IAAD,UACGd,GACCA,EAAS6C,KAAI,SAACtD,EAAGU,GAAJ,OACX,sBAAK/C,MAAO,CAAE4F,QAAS,QAAvB,WACIxC,EAAaN,EAAUT,EAAGU,EAAGa,EAAKT,MAClCG,EAAcR,EAAUC,EAAGa,EAAKT,OAChC,cAAC,IAAD,CAAS0C,MAAOxD,EAAEa,OAAOnC,KAAM+E,UAAU,eAAeC,UAAQ,EAAhE,SACE,cAAC,IAAD,CACEC,GAAG,MACHC,GAAI,EACJvG,KAAK,KACLwG,OAAO,UACPnF,KAAMsB,EAAEa,OAAOnC,KACf0D,IAAKpC,EAAEa,OAAOiD,QAIpB,sBACEnG,MAAO,CACLoG,gBAAgB,GAAD,OACb/D,EAAEa,OAAOC,MAAQS,EAAKT,IAAM,UAAY,WAE1CkD,WAAYxD,EAAmBC,EAAUT,EAAGU,EAAGa,EAAKT,KACpDlD,UAAWsD,EAAWT,EAAUT,EAAGU,EAAGa,EAAKT,KAAO,EAAI,GACtDb,aAAc,OACdgE,QAAS,WACTC,SAAU,OATd,SAYGlE,EAAEmE,YA1B+BnE,EAAEc,W,4BClBnC,OAA0B,kC,yCCwB1BsD,GArBO,SAAC,GAAqC,IAAnC7C,EAAkC,EAAlCA,KAAM8C,EAA4B,EAA5BA,eAAgBC,EAAY,EAAZA,MAC7C,OACE,eAAC,KAAD,CACEC,GAAI,EACJC,GAAI,EACJvE,aAAa,KACbD,EAAG,EACHO,GAAI,EACJD,QAAQ,QACRH,SAAU,GACVzC,YAAY,SACZmG,OAAO,UACPpG,QAAS4G,EAVX,UAYG9C,EAAK7C,KACL4F,IAAU/C,EAAKT,KAAO,4CACvB,cAAC2D,GAAA,EAAD,CAAWC,GAAI,QCwBNC,GAvCM,SAAC,GAA8B,IAA5BN,EAA2B,EAA3BA,eAAgB9C,EAAW,EAAXA,KAGtC,OACE,eAAC,IAAD,CACE9D,QAAS4G,EACTR,OAAO,UACP/D,GAAG,UACH8E,OAAQ,CACNC,WAAY,UACZC,MAAO,SAET/E,EAAE,OACFJ,EAAE,OACFuC,WAAW,SACX4C,MAAM,QACNP,GAAI,EACJC,GAAI,EACJjE,GAAI,EACJN,aAAa,KAff,UAiBE,cAAC,IAAD,CACE2D,GAAI,EACJvG,KAAK,KACLwG,OAAO,UACPnF,KAAM6C,EAAK7C,KACX0D,IAAKb,EAAKuC,MAEZ,eAAC,IAAD,WACE,cAAC,IAAD,UAAOvC,EAAK7C,OACZ,eAAC,IAAD,CAAMyB,SAAS,KAAf,UACE,yCACCoB,EAAK3C,gBCqPDmG,GAjQc,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,cAAeC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACzD,EAAoCzD,cAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QACxB,EAA0ChH,qBAA1C,mBAAOuK,EAAP,KAAsBC,EAAtB,KACA,EAA4BxK,mBAAS,IAArC,mBAAOyK,EAAP,KAAeC,EAAf,KACA,EAAwC1K,mBAAS,IAAjD,mBAAO2K,EAAP,KAAqBC,EAArB,KACA,EAA8B5K,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAA0CV,oBAAS,GAAnD,mBAAO6K,EAAP,KAAsBC,EAAtB,KACM3K,EAAQC,cAEd,EAAgDyH,IAAxCG,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAAiBtB,EAAvC,EAAuCA,KAEjCoE,EAAY,uCAAG,WAAOC,GAAP,mBAAAlK,EAAA,yDACnB4J,EAAUM,GACLA,EAFc,iEAOjBtK,GAAW,GACLU,EAAS,CACbC,QAAS,CACP4J,cAAc,UAAD,OAAYtE,EAAKuE,SAVjB,SAaM5J,IAAM6J,IAAN,2BAA8BV,GAAUrJ,GAb9C,gBAaTI,EAbS,EAaTA,KACRkC,QAAQC,IAAInC,GACZd,GAAW,GACXkK,EAAgBpJ,GAhBC,kDAkBjBrB,EAAM,CACJY,MAAO,iBACPe,YAAa,oCACbd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAEZT,GAAW,GA1BM,0DAAH,sDA8BZ0K,EAAY,uCAAG,gCAAAtK,EAAA,yDACdyJ,EADc,iEAIjBO,GAAiB,GACX1J,EAAS,CACbC,QAAS,CACP4J,cAAc,UAAD,OAAYtE,EAAKuE,SAPjB,SAUM5J,IAAM+J,IAAN,mBAErB,CACEC,OAAQtD,EAAa9B,IACrBqF,SAAUhB,GAEZnJ,GAhBe,gBAUTI,EAVS,EAUTA,KASRkC,QAAQC,IAAInC,EAAK0E,KAEjB+B,EAAgBzG,GAChB8I,GAAeD,GACfS,GAAiB,GAvBA,kDAyBjB3K,EAAM,CACJY,MAAO,iBACPe,YAAa,KAAMC,SAASP,KAAKQ,QACjChB,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZ2J,GAAiB,GAjCA,QAmCnBN,EAAiB,IAnCE,0DAAH,qDAsCZgB,EAAa,uCAAG,WAAOC,GAAP,mBAAA3K,EAAA,0DAChBkH,EAAavB,MAAMiF,MAAK,SAACC,GAAD,OAAOA,EAAEzF,MAAQuF,EAAMvF,OAD/B,uBAElB/F,EAAM,CACJY,MAAO,yBACPC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAPM,6BAYhB6G,EAAa4D,WAAW1F,MAAQS,EAAKT,IAZrB,uBAalB/F,EAAM,CACJY,MAAO,+BACPC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAlBM,0CAwBlBT,GAAW,GACLU,EAAS,CACbC,QAAS,CACP4J,cAAc,UAAD,OAAYtE,EAAKuE,SA3BhB,UA8BK5J,IAAM+J,IAAN,qBAErB,CACEC,OAAQtD,EAAa9B,IACrBH,OAAQ0F,EAAMvF,KAEhB9E,GApCgB,iBA8BVI,EA9BU,EA8BVA,KASRyG,EAAgBzG,GAChB8I,GAAeD,GACf3J,GAAW,GAzCO,kDA2ClBP,EAAM,CACJY,MAAO,iBACPe,YAAa,KAAMC,SAASP,KAAKQ,QACjChB,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZT,GAAW,GAnDO,QAqDpB8J,EAAiB,IArDG,0DAAH,sDAwDbqB,EAAY,uCAAG,WAAOJ,GAAP,mBAAA3K,EAAA,yDACfkH,EAAa4D,WAAW1F,MAAQS,EAAKT,KAAOuF,EAAMvF,MAAQS,EAAKT,IADhD,uBAEjB/F,EAAM,CACJY,MAAO,kCACPC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAPK,0CAajBT,GAAW,GACLU,EAAS,CACbC,QAAS,CACP4J,cAAc,UAAD,OAAYtE,EAAKuE,SAhBjB,SAmBM5J,IAAM+J,IAAN,wBAErB,CACEC,OAAQtD,EAAa9B,IACrBH,OAAQ0F,EAAMvF,KAEhB9E,GAzBe,gBAmBTI,EAnBS,EAmBTA,KASRiK,EAAMvF,MAAQS,EAAKT,IAAM+B,IAAoBA,EAAgBzG,GAC7D8I,GAAeD,GACfD,IACA1J,GAAW,GA/BM,kDAiCjBP,EAAM,CACJY,MAAO,iBACPe,YAAa,KAAMC,SAASP,KAAKQ,QACjChB,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZT,GAAW,GAzCM,QA2CnB8J,EAAiB,IA3CE,0DAAH,sDA8ClB,OACE,qCACE,cAAC,IAAD,CAAYzF,EAAG,CAAEkC,KAAM,QAAUC,KAAM,cAACC,EAAA,EAAD,IAActE,QAASkE,IAE9D,eAAC,IAAD,CAAOC,QAASA,EAASF,OAAQA,EAAQM,YAAU,EAAnD,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CACE7B,SAAS,OACTC,WAAW,YACXT,EAAE,OACFC,eAAe,SAJjB,SAMGgD,EAAauD,WAGhB,cAAC,IAAD,IACA,eAAC,IAAD,CAAWxG,EAAE,OAAOsC,QAAQ,SAASC,WAAW,SAAhD,UACE,cAAC,IAAD,CAAKnC,EAAE,OAAOJ,EAAE,OAAO+G,SAAS,OAAOC,GAAI,EAA3C,SACG/D,EAAavB,MAAMiC,KAAI,SAACiD,GAAD,OACtB,cAAC,GAAD,CAEEhF,KAAMgF,EACNjC,MAAO1B,EAAa4D,WACpBnC,eAAgB,kBAAMoC,EAAaF,KAH9BA,EAAEzF,UAOb,eAAC,IAAD,CAAanB,EAAE,OAAf,UACE,cAAC,IAAD,CACE1C,YAAY,YACZsD,GAAI,EACJvD,MAAOmI,EACPjI,SAAU,SAACC,GAAD,OAAOiI,EAAiBjI,EAAEC,OAAOJ,UAE7C,cAAC,IAAD,CACEsD,QAAQ,QACR5C,YAAY,OACZkJ,GAAI,EACJ/I,UAAW4H,EACXhI,QAASuI,EALX,uBAUF,cAAC,IAAD,UACE,cAAC,IAAD,CACE/I,YAAY,oBACZsD,GAAI,EACJrD,SAAU,SAACC,GAAD,OAAOwI,EAAaxI,EAAEC,OAAOJ,YAI1C3B,EACC,cAAC,IAAD,CAASgC,KAAK,OADR,OAGNkI,QAHM,IAGNA,OAHM,EAGNA,EAAcjC,KAAI,SAAC/B,GAAD,OAChB,cAAC,GAAD,CAEEA,KAAMA,EACN8C,eAAgB,kBAAM+B,EAAc7E,KAF/BA,EAAKT,WAOlB,cAAC,IAAD,UACE,cAAC,IAAD,CAAQrD,QAAS,kBAAMgJ,EAAalF,IAAO7D,YAAY,MAAvD,qCRiBGmJ,GA5QI,SAAC,GAAmC,IAAjC5B,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAChC,EAAgCtK,mBAAS,IAAzC,mBAAO6F,EAAP,KAAiBqG,EAAjB,KACA,EAA8BlM,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAAoCV,mBAAS,IAA7C,mBAAOmM,EAAP,KAAmBC,EAAnB,KACA,EAA8CpM,oBAAS,GAAvD,mBAAOqM,EAAP,KAAwBC,EAAxB,KACA,EAA4BtM,oBAAS,GAArC,mBAAOuM,EAAP,KAAeC,EAAf,KACA,EAAgCxM,oBAAS,GAAzC,mBAAOyM,EAAP,KAAiBC,EAAjB,KACMvM,EAAQC,cAERuM,EAAiB,CACrBC,MAAM,EACNC,UAAU,EACVC,cAAeA,GACfC,iBAAkB,CAChBC,oBAAqB,mBAGzB,EACEnF,IADMG,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAAiBtB,GAAvC,EAAuCA,KAAMwB,GAA7C,EAA6CA,aAAcC,GAA3D,EAA2DA,gBAGrDgC,GAAa,uCAAG,gCAAAtJ,EAAA,yDACfkH,EADe,iEAIZ5G,EAAS,CACbC,QAAS,CACP4J,cAAc,UAAD,OAAYtE,GAAKuE,SAIlCxK,GAAW,GAVO,SAYKY,IAAM6J,IAAN,uBACLnD,EAAa9B,KAC7B9E,GAdgB,gBAYVI,EAZU,EAYVA,KAIR0K,EAAY1K,GACZd,GAAW,GAEX8D,EAAOyI,KAAK,YAAajF,EAAa9B,KAnBpB,kDAqBlB/F,EAAM,CACJY,MAAO,iBACPe,YAAa,8BACbd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA3BM,0DAAH,qDAgCb+L,GAAW,uCAAG,WAAOC,GAAP,mBAAArM,EAAA,yDACA,UAAdqM,EAAMC,MAAmBjB,EADX,wBAEhB3H,EAAOyI,KAAK,cAAejF,EAAa9B,KAFxB,SAIR9E,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChB4J,cAAc,UAAD,OAAYtE,GAAKuE,SAGlCkB,EAAc,IAVA,SAWS9K,IAAMC,KAC3B,eACA,CACEgI,QAAS4C,EACTb,OAAQtD,GAEV5G,GAjBY,gBAWNI,EAXM,EAWNA,KAQRgD,EAAOyI,KAAK,cAAezL,GAC3B0K,EAAY,GAAD,mBAAKrG,GAAL,CAAerE,KApBZ,kDAsBdrB,EAAM,CACJY,MAAO,iBACPe,YAAa,6BACbd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA5BE,0DAAH,sDAkCjBuD,qBAAU,YACRF,EAAS6I,KA1FI,0BA2FNJ,KAAK,QAAStG,IACrBnC,EAAO8I,GAAG,aAAa,kBAAMhB,GAAmB,MAChD9H,EAAO8I,GAAG,UAAU,kBAAMZ,GAAY,MACtClI,EAAO8I,GAAG,eAAe,kBAAMZ,GAAY,QAG1C,IAEHhI,qBAAU,WACR0F,KAEA3F,EAAsBuD,IAErB,CAACA,IAEJtD,qBAAU,WACRF,EAAO8I,GAAG,oBAAoB,SAACC,GAE1B9I,GACDA,EAAoByB,MAAQqH,EAAmBC,KAAKtH,IAOpDgG,EAAY,GAAD,mBAAKrG,GAAL,CAAe0H,KALrBpF,GAAasF,SAASF,KACzBnF,GAAgB,CAACmF,GAAF,mBAAyBpF,MACxCmC,GAAeD,UAQvB,IC/F4B7D,GAAYC,GDoHxC,OACE,mCACCuB,EACC,qCACE,cAAC,IAAD,CACEzC,SAAU,CAAE0B,KAAM,OAAQS,GAAI,QAC9BqE,GAAI,EACJpC,GAAI,EACJxE,EAAE,OACFK,WAAW,YACXT,EAAE,OACFC,eAAgB,CAAEiC,KAAM,iBACxBK,WAAW,SARb,SAUE,sBAAKvE,MAAO,CACV4F,QAAS,OACTrB,WAAY,SACZtC,eAAgB,iBAHlB,UAKE,cAAC,IAAD,CACED,EAAG,CAAEkC,KAAM,OAAQS,GAAI,QACvBR,KAAM,cAACwG,EAAA,EAAD,IACN7K,QAAS,kBAAMoF,EAAgB,OAIhCpC,IACGmC,EAAa2F,YAQb,qCACG3F,EAAauD,SAASqC,cACvB,cAAC,GAAD,CACExD,cAAeA,GACfC,WAAYA,EACZC,cAAeA,OAZnB,qCACG/D,EAAUI,GAAMqB,EAAavB,OAC9B,cAAC,EAAD,CACEE,MCnJUH,GDmJUG,GCnJEF,GDmJIuB,EAAavB,MClJlDA,GAAM,GAAGP,MAAQM,GAAWN,IAAMO,GAAM,GAAKA,GAAM,eDiKpD,cAAC,IAAD,CACE1B,EAAE,OACFsC,QAAQ,SACRrC,eAAe,WACfC,EAAG,EACHC,GAAG,UACHC,EAAE,OACFvC,EAAE,MACFyC,aAAa,KACbwI,UAAU,SATZ,SAWE,sBACE9K,MAAO,CACL4F,QAAS,OACTmF,cAAe,SACf9I,eAAgB,WAChB6I,UAAW,SACXE,OAAQ,OACRpL,MAAO,OACP0G,QAAS,WACTF,gBAAiB,WATrB,UAYG1I,EACC,cAAC,IAAD,CACEgC,KAAK,KACL0C,EAAG,GACHvC,EAAG,GACHoL,UAAU,SACVC,OAAO,SAGT,qBAAKC,UAAU,WAAf,SACE,cAAC,EAAD,CAAgBrI,SAAUA,MAI9B,eAAC,IAAD,CACEsI,UAAWjB,GACXhL,GAAG,aACHC,YAAU,EACV4G,GAAI,EAJN,UAMG0D,EACC,8BACE,cAAC,IAAD,CACE2B,QAASzB,EAEThK,MAAO,GACPI,MAAO,CAAEsL,aAAc,GAAIjF,WAAY,OAI3C,6BAEF,cAAC,IAAD,CACE1D,QAAQ,SACRR,GAAG,UACH7C,YAAY,oBACZD,MAAO+J,EACP7J,SA/HQ,SAACC,GAGrB,GAFA6J,EAAc7J,EAAEC,OAAOJ,OAElBiK,EAAL,CAEKE,IACHC,GAAU,GACVhI,EAAOyI,KAAK,SAAUjF,EAAa9B,MAErC,IAAIoI,GAAiB,IAAIC,MAAOC,UAEhCC,YAAW,YACK,IAAIF,MAAOC,UACAF,GAHT,KAIe/B,IAC7B/H,EAAOyI,KAAK,cAAejF,EAAa9B,KACxCsG,GAAU,MANI,oBA6HhB,sBACEzJ,MAAO,CACL2L,UAAW,SACXX,OAAQ,QAHZ,UAME,qBAAKvG,IAAKmH,GAAOlH,IAAI,GAAG1E,MAAO,CAAEqG,WAAY,SAC7C,oBAAIrG,MAAO,CAAEmH,MAAO,QAAS3E,SAAU,QAAvC,6DSjQOqJ,GAnBC,SAAC,GAAmC,IAAjCvE,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACrBtC,EAAiBH,IAAjBG,aAER,OACE,cAAC,IAAD,CACEjD,EAAG,CAAEkC,KAAMe,EAAe,OAAS,OAAQN,GAAI,QAC/CJ,WAAW,SACXD,QAAQ,SACRpC,EAAG,EACHC,GAAG,QACHC,EAAG,CAAE8B,KAAM,OAAQS,GAAI,OACvBrC,aAAa,KACbC,YAAY,MARd,SAUE,cAAC,GAAD,CAAY+E,WAAYA,EAAYC,cAAeA,O,UCG1CuE,GAnBK,WAClB,OACE,eAAC,IAAD,WACE,cAAC,KAAD,CAAUd,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,aCgLRe,GA5KQ,SAAC,GAAkB,IAAhBlI,EAAe,EAAfA,SACxB,EAAoCC,cAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QACxB,EAA0ChH,qBAA1C,mBAAOuK,EAAP,KAAsBC,EAAtB,KACA,EAA0CxK,mBAAS,IAAnD,mBAAO+O,EAAP,KAAsBC,EAAtB,KACA,EAA4BhP,mBAAS,IAArC,mBAAOyK,EAAP,KAAeC,EAAf,KACA,EAAwC1K,mBAAS,IAAjD,mBAAO2K,EAAP,KAAqBC,EAArB,KACA,EAA8B5K,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACMP,EAAQC,cAEd,EAAkCyH,IAA1BlB,EAAR,EAAQA,KAAM0B,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,SAiBfyC,EAAY,uCAAG,WAAOC,GAAP,mBAAAlK,EAAA,yDACnB4J,EAAUM,GACLA,EAFc,iEAOjBtK,GAAW,GACLU,EAAS,CACbC,QAAS,CACP4J,cAAc,UAAD,OAAYtE,EAAKuE,SAVjB,SAaM5J,IAAM6J,IAAN,2BAA8BV,GAAUrJ,GAb9C,gBAaTI,EAbS,EAaTA,KACRkC,QAAQC,IAAInC,GACZd,GAAW,GACXkK,EAAgBpJ,GAhBC,kDAkBjBrB,EAAM,CACJY,MAAO,iBACPe,YAAa,oCACbd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAxBK,0DAAH,sDAiCZ8N,EAAY,uCAAG,gCAAAnO,EAAA,yDACdyJ,GAAkBwE,EADJ,uBAEjB5O,EAAM,CACJY,MAAO,6BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,QAPK,0CAaXC,EAAS,CACbC,QAAS,CACP4J,cAAc,UAAD,OAAYtE,EAAKuE,SAfjB,SAkBM5J,IAAMC,KAAN,kBAErB,CACEuC,KAAMyG,EACN9D,MAAO9E,KAAKC,UAAUmN,EAAcrG,KAAI,SAACiD,GAAD,OAAOA,EAAEzF,SAEnD9E,GAxBe,gBAkBTI,EAlBS,EAkBTA,KAQR8G,EAAS,CAAC9G,GAAF,mBAAW6G,KACnBrB,IACA7G,EAAM,CACJY,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAjCK,kDAoCjBhB,EAAM,CACJY,MAAO,6BACPe,YAAa,KAAMC,SAASP,KAC5BR,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA1CK,0DAAH,qDA+ClB,OACE,qCACE,sBAAM0B,QAASkE,EAAf,SAAwBH,IAExB,eAAC,IAAD,CAAOI,QAASA,EAASF,OAAQA,EAAQM,YAAU,EAAnD,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CACE7B,SAAS,OACTC,WAAW,YACXT,EAAE,OACFC,eAAe,SAJjB,+BAQA,cAAC,IAAD,IACA,eAAC,IAAD,CAAWD,EAAE,OAAOsC,QAAQ,SAASC,WAAW,SAAhD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEjF,YAAY,YACZsD,GAAI,EACJrD,SAAU,SAACC,GAAD,OAAOiI,EAAiBjI,EAAEC,OAAOJ,YAG/C,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,YAAY,mCACZsD,GAAI,EACJrD,SAAU,SAACC,GAAD,OAAOwI,EAAaxI,EAAEC,OAAOJ,YAG3C,cAAC,IAAD,CAAK+C,EAAE,OAAOJ,EAAE,OAAO+G,SAAS,OAAhC,SACGiD,EAAcrG,KAAI,SAACiD,GAAD,OACjB,cAAC,GAAD,CAEEhF,KAAMgF,EACNlC,eAAgB,kBAvFVyF,EAuF6BvD,OAtFjDqD,EAAiBD,EAAcI,QAAO,SAACC,GAAD,OAASA,EAAIlJ,MAAQgJ,EAAQhJ,QADhD,IAACgJ,IAqFDvD,EAAEzF,UAMZzF,EAEC,6CAFM,OAINkK,QAJM,IAINA,OAJM,EAINA,EACI0E,MAAM,EAAG,GACV3G,KAAI,SAAC/B,GAAD,OACH,cAAC,GAAD,CAEEA,KAAMA,EACN8C,eAAgB,kBAjJb6F,EAiJ+B3I,OAhJ9CoI,EAActB,SAAS6B,GACzBnP,EAAM,CACJY,MAAO,qBACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,QAKd6N,EAAiB,GAAD,mBAAKD,GAAL,CAAoBO,MAZlB,IAACA,IA+IE3I,EAAKT,WAOpB,cAAC,IAAD,UACE,cAAC,IAAD,CAAQrD,QAASoM,EAAcnM,YAAY,OAA3C,qCCnBGyM,GAzJC,SAAC,GAAoB,IAAlBlF,EAAiB,EAAjBA,WACjB,EAAoCrK,qBAApC,mBAAOwG,EAAP,KAAmBgJ,EAAnB,KAEA,EAAiE3H,IAAzDG,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAAiBtB,EAAvC,EAAuCA,KAAM0B,EAA7C,EAA6CA,MAAOC,EAApD,EAAoDA,SAE9CnI,EAAQC,cAERqP,EAAU,uCAAG,gCAAA3O,EAAA,sEAGTM,EAAS,CACbC,QAAS,CACP4J,cAAc,UAAD,OAAYtE,EAAKuE,SALnB,SASQ5J,IAAM6J,IAAI,YAAa/J,GAT/B,gBASPI,EATO,EASPA,KACR8G,EAAS9G,GAVM,gDAYfrB,EAAM,CACJY,MAAO,iBACPe,YAAa,2BACbd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAlBG,yDAAH,qDA6BhB,OANAuD,qBAAU,WACR8K,EAAc7N,KAAKgD,MAAMlD,aAAamD,QAAQ,cAC9C6K,MAEC,CAACpF,IAGF,cAAC,IAAD,CACAtF,EAAG,CAAEkC,KAAMe,EAAe,OAAS,OAAQN,GAAI,QAC/CL,QAAQ,SACRC,WAAW,SACXrC,EAAG,EACHC,GAAG,QACHC,EAAG,CAAE8B,KAAM,OAAQS,GAAI,OACvBrC,aAAa,KACbC,YAAY,MARZ,SAUA,sBAAKvC,MAAO,CACVkE,KAAMe,EAAe,gBAAkB,gBACvCV,WAAY,SACZ+B,QAAS,MACT1G,MAAO,OACPwG,gBAAiB,QACjB2E,cAAe,SACfzI,aAAc,KACdC,YAAa,OARf,UAUE,cAAC,IAAD,CACEyG,GAAI,EACJpC,GAAI,EACJpE,SAAU,CAAE0B,KAAM,OAAQS,GAAI,QAC9BlC,WAAW,YACXT,EAAE,OACFI,EAAE,OACFH,eAAe,gBACfsC,WAAW,SARb,SAUE,sBACEvE,MAAO,CACL4F,QAAS,OACT3D,eAAgB,gBAChBsC,WAAY,SACZ3E,MAAO,OACP+M,cAAe,OANnB,qBAWE,cAAC,GAAD,SAWJ,cAAC,IAAD,CACE3K,EAAE,OACFsC,QAAQ,SACRpC,EAAG,EACHC,GAAG,UACHC,EAAE,OACFvC,EAAE,MACFyC,aAAa,KAPf,SAUE,qBACEtC,MAAO,CACL4F,QAAS,OACTmF,cAAe,SACfzE,QAAS,MACTF,gBAAiB,UACjBxG,MAAO,OACPoL,OAAQ,MACR1I,aAAc,MARlB,SAYGgD,EACC,cAAC,IAAD,CAAOwF,UAAU,SAAjB,SACGxF,EAAMK,KAAI,SAAC8E,GAAD,OACT,eAAC,IAAD,CACE3K,QAAS,kBAAMoF,EAAgBuF,IAC/BvE,OAAO,UACP/D,GAAI8C,IAAiBwF,EAAO,UAAY,UACxCtD,MAAOlC,IAAiBwF,EAAO,QAAU,QACzC7D,GAAI,EACJC,GAAI,EACJvE,aAAa,KAPf,UAWI,cAAC,IAAD,CACEE,SAAU,CAAE0B,KAAM,OAAQS,GAAI,QADhC,SAGI8F,EAAKG,YAEHH,EAAKjC,SADLhF,EAAUC,EAAYgH,EAAK/G,SAGlC+G,EAAKmC,eACJ,eAAC,IAAD,CAAMpK,SAAS,KAAf,UACE,8BAAIiI,EAAKmC,cAAc1J,OAAOnC,KAA9B,SACC0J,EAAKmC,cAAcpG,QAAQvD,OAAS,GACjCwH,EAAKmC,cAAcpG,QAAQqG,UAAU,EAAG,IAAM,MAC9CpC,EAAKmC,cAAcpG,aAftBiE,EAAKtH,UAsBhB,cAAC,GAAD,c,6DC2EG2J,OApMf,WACE,MAA4B7P,mBAAS,IAArC,mBAAOyK,EAAP,KAAeC,EAAf,KACA,EAAwC1K,mBAAS,IAAjD,mBAAO2K,EAAP,KAAqBC,EAArB,KACA,EAA8B5K,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAAsCV,oBAAS,GAA/C,mBAAO8P,EAAP,KAAoBC,EAApB,KAEA,EAOIlI,IANFI,EADF,EACEA,gBACAtB,EAFF,EAEEA,KACAwB,EAHF,EAGEA,aACAC,EAJF,EAIEA,gBACAC,EALF,EAKEA,MACAC,EANF,EAMEA,SAGInI,EAAQC,cACd,EAAoCyG,cAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QAClBrG,EAAUC,cAOVmK,EAAY,uCAAG,gCAAAjK,EAAA,yDACd2J,EADc,uBAEjBtK,EAAM,CACJY,MAAO,mCACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,aAPK,0CAajBT,GAAW,GAELU,EAAS,CACbC,QAAS,CACP4J,cAAc,UAAD,OAAYtE,EAAKuE,SAjBjB,SAqBM5J,IAAM6J,IAAN,2BAA8BV,GAAUrJ,GArB9C,gBAqBTI,EArBS,EAqBTA,KAERd,GAAW,GACXkK,EAAgBpJ,GAxBC,kDA0BjBrB,EAAM,CACJY,MAAO,iBACPe,YAAa,oCACbd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAhCK,0DAAH,qDAqCZ6O,EAAU,uCAAG,WAAOjK,GAAP,mBAAAjF,EAAA,6DACjB4C,QAAQC,IAAIoC,GADK,SAIfgK,GAAe,GACT3O,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChB4J,cAAc,UAAD,OAAYtE,EAAKuE,SARnB,SAWQ5J,IAAMC,KAAN,YAAwB,CAAEwE,UAAU3E,GAX5C,gBAWPI,EAXO,EAWPA,KAEH6G,EAAMqD,MAAK,SAACuE,GAAD,OAAOA,EAAE/J,MAAQ1E,EAAK0E,QAAMoC,EAAS,CAAC9G,GAAF,mBAAW6G,KAC/DJ,EAAgBzG,GAChBuO,GAAe,GACf/I,IAhBe,kDAkBf7G,EAAM,CACJY,MAAO,0BACPe,YAAa,KAAME,QACnBhB,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAxBG,0DAAH,sDA6BhB,OACE,qCACA,cAAC,IAAD,CACE4D,EAAE,OACFC,eAAe,gBACfsC,WAAW,SACXpC,GAAG,QACHC,EAAE,OACFF,EAAE,oBACFK,YAAY,MAPd,SASE,sBAAKvC,MAAO,CAAE4F,QAAS,OAAQ3D,eAAgB,iBAA/C,UACE,cAAC,IAAD,CAAS4D,MAAM,uBAAuBE,UAAQ,EAACD,UAAU,aAAzD,SACE,eAAC,IAAD,CAAQnD,QAAQ,QAAQ7C,QAASkE,EAAjC,UACE,mBAAGmH,UAAU,kBACb,cAAC,IAAD,CAAMnJ,EAAG,CAAEkC,KAAM,OAAQS,GAAI,QAAUiC,GAAI,EAA3C,8BAKJ,cAAC,IAAD,CAAMpE,SAAS,MAAMC,WAAW,YAAhC,mBAGA,gCACE,eAAC,KAAD,WACE,eAAC,KAAD,CAAYP,EAAG,EAAf,UACE,cAAC,KAAD,CACEiL,MAAO/H,EAAanC,OACpBmK,OAAQC,UAAOC,QAEjB,cAACC,GAAA,EAAD,CAAU/K,SAAS,MAAMH,EAAG,OAE9B,eAAC,KAAD,CAAU0E,GAAI,EAAd,WACI3B,EAAanC,QAAU,kBACxBmC,EAAaO,KAAI,SAAC6H,GAAD,OAChB,cAAC,KAAD,CAEE1N,QAAS,WACPoF,EAAgBsI,EAAM/C,MACtBpF,EAAgBD,EAAagH,QAAO,SAACqB,GAAD,OAAOA,IAAMD,OAJrD,SAOGA,EAAM/C,KAAKG,YAAX,yBACqB4C,EAAM/C,KAAKjC,UADhC,2BAEuBhF,EAAUI,EAAM4J,EAAM/C,KAAK/G,SAR9C8J,EAAMrK,cAanB,eAAC,KAAD,WACE,cAAC,KAAD,CAAYuK,GAAIC,IAAQxL,GAAG,QAAQyL,UAAW,cAACC,GAAA,EAAD,IAA9C,SACE,qBAAKpJ,IAAG,kDAA6Cb,EAAKtG,WAAlD,QAAoEoH,IAAI,GAAG1E,MAAO,CAAEgL,OAAQ,OAAQpL,MAAO,OAAQ0C,aAAc,WAQ3I,eAAC,KAAD,WACE,eAAC,EAAD,CAAcsB,KAAMA,EAApB,UACE,cAAC,KAAD,yBAAgC,OAElC,cAAC,KAAD,IACA,cAAC,KAAD,CAAU9D,QAvIA,WACpBpB,aAAaoP,WAAW,YACxBlQ,EAAQkB,KAAK,MAqIH,kCAOV,eAAC,KAAD,CAAQgH,UAAU,OAAO7B,QAASA,EAASF,OAAQA,EAAnD,UACE,cAAC,IAAD,IACA,eAAC,KAAD,WACE,cAAC,IAAD,CAAcgK,kBAAkB,MAAhC,0BACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAK/L,EAAE,OAAOgH,GAAI,EAAlB,SACE,sBAAKhJ,MAAO,CAAE4F,QAAS,OAAQ+G,cAAe,OAA9C,UACE,cAAC,IAAD,CACErN,YAAY,wBACZ2G,GAAI,EACJ5G,MAAOqI,EACPnI,SAAU,SAACC,GAAD,OAAOmI,EAAUnI,EAAEC,OAAOJ,UAEtC,cAAC,IAAD,CAAQS,QAASkI,EAAjB,yBAGHtK,EACC,cAAC,GAAD,IADM,OAGNkK,QAHM,IAGNA,OAHM,EAGNA,EAAcjC,KAAI,SAAC/B,GAAD,OAChB,cAAC,GAAD,CAEEA,KAAMA,EACN8C,eAAgB,kBAAMuG,EAAWrJ,EAAKT,OAFjCS,EAAKT,QAMf4J,GAAe,cAAC,IAAD,CAAS9D,GAAG,OAAOjH,EAAE,sBCpMhCgM,GAnBE,WACf,MAAoC/Q,oBAAS,GAA7C,mBAAOqK,EAAP,KAAmBC,EAAnB,KACQ3D,EAASkB,IAATlB,KAER,OACE,sBAAK5D,MAAO,CAAEJ,MAAO,QAArB,UACGgE,GAAQ,cAAC,GAAD,IACT,cAAC,IAAD,CAAK5B,EAAE,OAAOC,eAAe,gBAAgBG,EAAE,OAAOvC,EAAE,SAASqC,EAAE,OAAnE,SACE,sBAAKlC,MAAO,CAAE4F,QAAS,OAAQ3D,eAAgB,gBAAiBrC,MAAO,OAAQoL,OAAQ,QAAvF,UACGpH,GAAQ,cAAC,GAAD,CAAS0D,WAAYA,IAC7B1D,GACC,cAAC,GAAD,CAAS0D,WAAYA,EAAYC,cAAeA,aC8L7C0G,GA9LA,WAEb,MAAwBhR,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACM+Q,EAAc,kBAAM/Q,GAASD,IAC7BE,EAAQC,cACRO,EAAUC,cAGVsQ,EAFWC,cAEavN,MAAMA,MACpCF,QAAQC,IAAI,eAAgBuN,GAG5B,MAAwBlR,mBAASkR,EAAapN,MAA9C,mBAAOA,EAAP,KAAasN,EAAb,KACA,EAAoCpR,mBAASkR,EAAa7Q,YAA1D,mBAAOA,EAAP,KAAmBC,EAAnB,KACA,EAA0BN,mBAASkR,EAAalN,OAAhD,mBAAOA,EAAP,KAAcqN,EAAd,KACA,EAAwCrR,mBAASkR,EAAa9M,cAA9D,mBAAOA,EAAP,KAAqBkN,EAArB,KACA,EAA8CtR,qBAA9C,mBAAOuR,EAAP,KAAwBC,EAAxB,KACA,EAAgCxR,qBAAhC,mBAAOO,EAAP,KAAiBC,EAAjB,KAGMK,EAAa,uCAAG,gCAAAC,EAAA,yDACfgD,GAASzD,GAAe2D,GAAUI,GAAiB7D,GAAagR,EADjD,uBAElBpR,EAAM,CACJY,MAAO,6BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAPM,6BAWhBZ,IAAagR,EAXG,uBAYlBpR,EAAM,CACJY,MAAO,yBACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAjBM,iCAqBpBuC,QAAQC,IAAIG,EAAMzD,EAAY2D,EAAOI,EAAc7D,GArB/B,SAuBZa,EAAS,CACbC,QAAS,CACP,eAAgB,qBAzBF,UA4BKC,IAAMC,KAC3B,YACA,CACEuC,OACAzD,aACA2D,QACAI,eACA7D,YAEFa,GArCgB,iBA4BVI,EA5BU,EA4BVA,KAWRkC,QAAQC,IAAI,WAAYnC,GACxBrB,EAAM,CACJY,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZM,aAAaC,QAAQ,WAAYC,KAAKC,UAAUJ,IAChDb,EAAQkB,KAAK,UAhDK,kDAkDlB1B,EAAM,CACJY,MAAO,iBACPe,YAAa,KAAMC,SAASP,KAAKQ,QACjChB,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAxDM,0DAAH,qDA6DnB,OACE,eAAC,IAAD,CAAW0D,KAAK,KAAKC,eAAa,EAAlC,UACE,cAAC,IAAD,CACEC,EAAE,OACFC,eAAe,SACfC,EAAG,EACHC,GAAG,QACHC,EAAE,OACFC,EAAE,gBACFC,aAAa,KACbC,YAAY,MARd,SAUE,cAAC,IAAD,CAAMC,SAAS,MAAMC,WAAW,YAAhC,sBAIF,cAAC,IAAD,CAAKN,GAAG,QAAQC,EAAE,OAAOF,EAAG,EAAGI,aAAa,KAAKC,YAAY,MAA7D,SACE,eAAC,IAAD,CAAMG,UAAQ,EAACC,QAAQ,eAAvB,UACE,cAAC,IAAD,CAASC,GAAG,MAAZ,SACE,cAAC,IAAD,CAAMJ,SAAS,MAAf,sBAEF,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAQtD,QAAQ,MAAhB,UACE,eAAC,IAAD,CAAaC,GAAG,aAAaC,YAAU,EAAvC,UACE,cAAC,IAAD,mBACA,cAAC,IAAD,CACEE,YAAY,kBACZC,SAAU,SAACC,GAAD,OAAO6O,EAAQ7O,EAAEC,OAAOJ,QAClCA,MAAO0B,EACP2N,UAAU,OAGd,eAAC,IAAD,CAAavP,GAAG,cAAcC,YAAU,EAAxC,UACE,cAAC,IAAD,0BACA,cAAC,IAAD,CACEE,YAAY,+BACZC,SAAU,SAACC,GAAD,OAAOjC,EAAciC,EAAEC,OAAOJ,QACxCA,MAAO/B,EACPoR,UAAU,OAGd,eAAC,IAAD,CAAavP,GAAG,QAAQC,YAAU,EAAlC,UACE,cAAC,IAAD,4BACA,cAAC,IAAD,CACEO,KAAK,QACLL,YAAY,2BACZC,SAAU,SAACC,GAAD,OAAO8O,EAAS9O,EAAEC,OAAOJ,QACnCA,MAAO4B,EACPyN,UAAU,OAGd,eAAC,IAAD,CAAavP,GAAG,gBAAgBC,YAAU,EAA1C,UACE,cAAC,IAAD,4BACA,cAAC,IAAD,CACEE,YAAY,2BACZC,SAAU,SAACC,GAAD,OAAO+O,EAAgB/O,EAAEC,OAAOJ,QAC1CA,MAAOgC,EACPqN,UAAU,OAGd,eAAC,IAAD,CAAavP,GAAG,WAAWC,YAAU,EAArC,UACE,cAAC,IAAD,uBACA,eAAC,IAAD,CAAYM,KAAK,KAAjB,UACE,cAAC,IAAD,CACEC,KAAMzC,EAAO,OAAS,WACtBoC,YAAY,iBACZC,SAAU,SAACC,GAAD,OAAO/B,EAAY+B,EAAEC,OAAOJ,UAExC,cAAC,IAAD,CAAmBO,MAAM,SAAzB,SACE,cAAC,IAAD,CAAQC,EAAE,UAAUH,KAAK,KAAKI,QAASoO,EAAvC,SACGhR,EAAO,OAAS,iBAKzB,eAAC,IAAD,CAAaiC,GAAG,mBAAmBC,YAAU,EAA7C,UACE,cAAC,IAAD,+BACA,eAAC,IAAD,CAAYM,KAAK,KAAjB,UACE,cAAC,IAAD,CACEC,KAAMzC,EAAO,OAAS,WACtBoC,YAAY,mBACZC,SAAU,SAACC,GAAD,OAAOiP,EAAmBjP,EAAEC,OAAOJ,UAE/C,cAAC,IAAD,CAAmBO,MAAM,SAAzB,SACE,cAAC,IAAD,CAAQC,EAAE,UAAUH,KAAK,KAAKI,QAASoO,EAAvC,SACGhR,EAAO,OAAS,iBAKzB,cAAC,IAAD,CACE6C,YAAY,OACZH,MAAM,OACNI,MAAO,CAAEC,UAAW,IACpBH,QAAShC,EAJX,qCC9KD6Q,OAVf,WACE,OACE,sBAAKxD,UAAU,MAAf,UACE,cAAC,IAAD,CAAOyD,KAAK,IAAIC,UAAWrN,EAAUsN,OAAK,IAC1C,cAAC,IAAD,CAAOF,KAAK,SAASC,UAAWb,KAChC,cAAC,IAAD,CAAOY,KAAK,UAAUC,UAAWZ,SCCxBc,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxO,MAAK,YAAkD,IAA/CyO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,mBCEdO,IAASC,OACP,cAAC,KAAD,UACE,cAAC,KAAD,UACE,cAAC,EAAD,UACE,cAAC,GAAD,UAINC,SAASC,eAAe,SAM1BX,O","file":"static/js/main.5e990e46.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [employeeId, setEmployeeId] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!employeeId || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    // console.log(employeeId, password);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { employeeId, password },\r\n        config\r\n      );\r\n\r\n      // console.log(JSON.stringify(data));\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"Employee-ID\" isRequired>\r\n        <FormLabel>Employee ID</FormLabel>\r\n        <Input\r\n          value={employeeId}\r\n          placeholder=\"Enter Your Nassa Employee ID\"\r\n          onChange={(e) => setEmployeeId(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Register = () => {\r\n\r\n  const history = useHistory();\r\n  const [employeeId, setEmployeeId] = useState('');\r\n\r\n  const onChange = (e) => {\r\n    setEmployeeId(e.target.value);\r\n  }\r\n\r\n\r\n  const onSubmit = (e) => {\r\n\r\n    if (employeeId === '') {\r\n      alert('Please enter your employee id');\r\n      return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    const url = `http://lucid.nassa.com.bd/api/Employee/GetEmployeeById?employeeId=${employeeId}`;\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(data);\r\n        setEmployeeId(employeeId);\r\n        history.push(\"/signup\",\r\n          {\r\n            state:\r\n            {\r\n              employeeId: data.EmployeeId,\r\n              name: data.FullName,\r\n              email: data.OfficeEmail,\r\n              image: data.Image,\r\n              mobileNumber: data.MobileNo,\r\n            }\r\n          });\r\n      })\r\n  }\r\n\r\n  return (\r\n    <form action=\"\" onSubmit={(e) => onSubmit(e)}>\r\n      <VStack spacing=\"5px\">\r\n        <FormControl id=\"employee-id\" isRequired>\r\n          <FormLabel>Employee ID</FormLabel>\r\n          <Input\r\n            placeholder=\"Enter Your Nassa Employee ID\"\r\n            name=\"employeeId\"\r\n            value={employeeId}\r\n            onChange={onChange}\r\n          />\r\n        </FormControl>\r\n        <Button\r\n          colorScheme=\"blue\"\r\n          width=\"100%\"\r\n          style={{ marginTop: 15 }}\r\n          type=\"submit\"\r\n        >\r\n          Register\r\n        </Button>\r\n      </VStack>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Register from \"../components/Authentication/Register\";\r\n// import Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          N Chat\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Register</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Register />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\nimport Robot from '../animations/robot.gif';\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5002\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    {selectedChat ? (\r\n      <>\r\n        <Text\r\n          fontSize={{ base: \"28px\", md: \"30px\" }}\r\n          pb={3}\r\n          px={2}\r\n          w=\"100%\"\r\n          fontFamily=\"Work sans\"\r\n          d=\"flex\"\r\n          justifyContent={{ base: \"space-between\" }}\r\n          alignItems=\"center\"\r\n        >\r\n          <div style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n          }}>\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n\r\n\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </div>\r\n        </Text>\r\n        <Box\r\n          d=\"flex\"\r\n          flexDir=\"column\"\r\n          justifyContent=\"flex-end\"\r\n          p={3}\r\n          bg=\"#E8E8E8\"\r\n          w=\"100%\"\r\n          h=\"93%\"\r\n          borderRadius=\"lg\"\r\n          overflowY=\"hidden\"\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              justifyContent: 'flex-end',\r\n              overflowY: \"hidden\",\r\n              height: \"100%\",\r\n              width: \"100%\",\r\n              padding: \"0px 10px\",\r\n              backgroundColor: \"#E8E8E8\",\r\n            }}\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </div>\r\n        </Box>\r\n      </>\r\n    ) : (\r\n      // to get socket.io on same page\r\n      <div\r\n        style={{\r\n          textAlign: \"center\",\r\n          height: '100%'\r\n        }}\r\n      >\r\n        <img src={Robot} alt=\"\" style={{ marginLeft: '30%' }} />\r\n        <h2 style={{ color: 'black', fontSize: '40px' }}> Please select a chat to start messaging.</h2>\r\n      </div>\r\n    )}\r\n  </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  // ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  // Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={`http://lucid.nassa.com.bd/EmployeeImage/${user.employeeId}.jpg`} alt={user.name} style={{ borderRadius: '50%' }}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"15px\", md: \"20px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          {/* <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter> */}\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","export default __webpack_public_path__ + \"static/media/robot.0617a419.gif\";","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n// import { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction, user }) => {\r\n  // const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box >\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","// import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\n// import { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n    d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n    flexDir=\"column\"\r\n    alignItems=\"center\"\r\n    p={3}\r\n    bg=\"white\"\r\n    w={{ base: \"100%\", md: \"31%\" }}\r\n    borderRadius=\"lg\"\r\n    borderWidth=\"1px\"\r\n  >\r\n    <div style={{\r\n      base: selectedChat ? \"display: none\" : \"display: flex\",\r\n      alignItems: 'center',\r\n      padding: '3px',\r\n      width: '100%',\r\n      backgroundColor: 'white',\r\n      flexDirection: 'column',\r\n      borderRadius: 'lg',\r\n      borderWidth: '1px',\r\n    }}>\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n            width: \"100%\",\r\n            paddingBottom: \"5px\",\r\n\r\n          }}\r\n        >\r\n          My Chats\r\n          <GroupChatModal>\r\n            {/* <Button\r\n              d=\"flex\"\r\n              fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n              rightIcon={<AddIcon />}\r\n            >\r\n              New Group Chat\r\n            </Button> */}\r\n          </GroupChatModal>\r\n        </div>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"90%\"\r\n        borderRadius=\"lg\"\r\n      // overflowY=\"hidden\"\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            padding: \"5px\",\r\n            backgroundColor: \"#F8F8F8\",\r\n            width: \"100%\",\r\n            height: \"90%\",\r\n            borderRadius: \"lg\",\r\n            // overflowY: \"hidden\",\r\n          }}\r\n        >\r\n          {chats ? (\r\n            <Stack overflowY=\"scroll\">\r\n              {chats.map((chat) => (\r\n                <Box\r\n                  onClick={() => setSelectedChat(chat)}\r\n                  cursor=\"pointer\"\r\n                  bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                  color={selectedChat === chat ? \"white\" : \"black\"}\r\n                  px={3}\r\n                  py={2}\r\n                  borderRadius=\"lg\"\r\n                  key={chat._id}\r\n                >\r\n                  \r\n                    <Text\r\n                      fontSize={{ base: \"18px\", md: \"20px\" }}\r\n                    >\r\n                      {!chat.isGroupChat\r\n                        ? getSender(loggedUser, chat.users)\r\n                        : chat.chatName}\r\n                    </Text>\r\n                  {chat.latestMessage && (\r\n                    <Text fontSize=\"xs\">\r\n                      <b>{chat.latestMessage.sender.name} : </b>\r\n                      {chat.latestMessage.content.length > 50\r\n                        ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                        : chat.latestMessage.content}\r\n                    </Text>\r\n                  )}\r\n                </Box>\r\n              ))}\r\n            </Stack>\r\n          ) : (\r\n            <ChatLoading />\r\n          )}\r\n        </div>\r\n      </Box>\r\n    </div >\r\n  </Box >\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\n// import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <Box\r\n      d=\"flex\"\r\n      justifyContent=\"space-between\"\r\n      alignItems=\"center\"\r\n      bg=\"white\"\r\n      w=\"100%\"\r\n      p=\"5px 10px 5px 10px\"\r\n      borderWidth=\"5px\"\r\n    >\r\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Nchat\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <img src={`http://lucid.nassa.com.bd/EmployeeImage/${user.employeeId}.jpg`} alt=\"\" style={{ height: '35px', width: '35px', borderRadius: '50%' }} />\r\n              {/* <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              /> */}\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </div>\r\n    </Box>\r\n\r\n    <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n      <DrawerOverlay />\r\n      <DrawerContent>\r\n        <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n        <DrawerBody>\r\n          <Box d=\"flex\" pb={2}>\r\n            <div style={{ display: 'flex', paddingBottom: '2px' }}>\r\n              <Input\r\n                placeholder=\"find by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Search</Button>\r\n            </div>\r\n          </Box>\r\n          {loading ? (\r\n            <ChatLoading />\r\n          ) : (\r\n            searchResult?.map((user) => (\r\n              <UserListItem\r\n                key={user._id}\r\n                user={user}\r\n                handleFunction={() => accessChat(user._id)}\r\n              />\r\n            ))\r\n          )}\r\n          {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n        </DrawerBody>\r\n      </DrawerContent>\r\n    </Drawer>\r\n  </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', width: '100%', height: '91vh' }}>\r\n          {user && <MyChats fetchAgain={fetchAgain} />}\r\n          {user && (\r\n            <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n          )}\r\n        </div>\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router\";\r\nimport {\r\n  Box,\r\n  Container,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst Signup = () => {\r\n\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const EmployeeInfo = location.state.state;\r\n  console.log(\"EmployeeInfo\", EmployeeInfo);\r\n\r\n\r\n  const [name, setName] = useState(EmployeeInfo.name);\r\n  const [employeeId, setEmployeeId] = useState(EmployeeInfo.employeeId);\r\n  const [email, setEmail] = useState(EmployeeInfo.email);\r\n  const [mobileNumber, setMobileNumber] = useState(EmployeeInfo.mobileNumber);\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n\r\n\r\n  const submitHandler = async () => {\r\n    if (!name || !employeeId || !email || !mobileNumber || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, employeeId, email, mobileNumber, password);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          employeeId,\r\n          email,\r\n          mobileNumber,\r\n          password,\r\n        },\r\n        config\r\n      );\r\n      console.log(\"Register\", data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          N Chat\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Text fontSize=\"4xl\">Signup</Text>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <VStack spacing=\"5px\">\r\n                <FormControl id=\"first-name\" isRequired>\r\n                  <FormLabel>Name</FormLabel>\r\n                  <Input\r\n                    placeholder=\"Enter Your Name\"\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    value={name}\r\n                    disabled={true}\r\n                  />\r\n                </FormControl>\r\n                <FormControl id=\"employee-id\" isRequired>\r\n                  <FormLabel>Employee ID</FormLabel>\r\n                  <Input\r\n                    placeholder=\"Enter Your Nassa Employee ID\"\r\n                    onChange={(e) => setEmployeeId(e.target.value)}\r\n                    value={employeeId}\r\n                    disabled={true}\r\n                  />\r\n                </FormControl>\r\n                <FormControl id=\"email\" isRequired>\r\n                  <FormLabel>Email Address</FormLabel>\r\n                  <Input\r\n                    type=\"email\"\r\n                    placeholder=\"Enter Your Email Address\"\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    value={email}\r\n                    disabled={true}\r\n                  />\r\n                </FormControl>\r\n                <FormControl id=\"mobile-number\" isRequired>\r\n                  <FormLabel>Mobile Number</FormLabel>\r\n                  <Input\r\n                    placeholder=\"Enter Your Mobile Number\"\r\n                    onChange={(e) => setMobileNumber(e.target.value)}\r\n                    value={mobileNumber}\r\n                    disabled={true}\r\n                  />\r\n                </FormControl>\r\n                <FormControl id=\"password\" isRequired>\r\n                  <FormLabel>Password</FormLabel>\r\n                  <InputGroup size=\"md\">\r\n                    <Input\r\n                      type={show ? \"text\" : \"password\"}\r\n                      placeholder=\"Enter Password\"\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                    />\r\n                    <InputRightElement width=\"4.5rem\">\r\n                      <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n                        {show ? \"Hide\" : \"Show\"}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <FormControl id=\"confirm-password\" isRequired>\r\n                  <FormLabel>Confirm Password</FormLabel>\r\n                  <InputGroup size=\"md\">\r\n                    <Input\r\n                      type={show ? \"text\" : \"password\"}\r\n                      placeholder=\"Confirm password\"\r\n                      onChange={(e) => setConfirmpassword(e.target.value)}\r\n                    />\r\n                    <InputRightElement width=\"4.5rem\">\r\n                      <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n                        {show ? \"Hide\" : \"Show\"}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <Button\r\n                  colorScheme=\"blue\"\r\n                  width=\"100%\"\r\n                  style={{ marginTop: 15 }}\r\n                  onClick={submitHandler}\r\n                >\r\n                  Sign Up\r\n                </Button>\r\n              </VStack>\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\nimport Signup from \"./components/Authentication/Signup\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n      <Route path=\"/signup\" component={Signup} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}