{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Register.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","animations/robot.gif","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","components/Authentication/Signup.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","show","setShow","toast","useToast","employeeId","setEmployeeId","password","setPassword","loading","setLoading","history","useHistory","submitHandler","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","push","description","response","message","spacing","id","isRequired","value","placeholder","onChange","e","target","size","type","width","h","onClick","colorScheme","style","marginTop","isLoading","Register","action","onSubmit","preventDefault","url","fetch","then","json","console","log","state","EmployeeId","name","FullName","email","OfficeEmail","image","Image","mobileNumber","MobileNo","alert","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","maxW","centerContent","d","justifyContent","p","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","variant","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","base","icon","isCentered","flexDir","alignItems","boxSize","src","alt","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","pic","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","showEmojiPicker","setShowEmojiPicker","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","md","isGroupChat","toUpperCase","overflowY","flexDirection","height","alignSelf","margin","className","onKeyDown","options","marginBottom","onEmojiClick","emojiObject","msg","emoji","lastTypingTime","Date","getTime","setTimeout","textAlign","Robot","Chatbox","ChatLoading","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","paddingBottom","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","notif","n","as","Button","rightIcon","removeItem","borderBottomWidth","Chatpage","Signup","handleClick","EmployeeInfo","useLocation","setName","setEmail","setMobileNumber","confirmpassword","setConfirmpassword","disabled","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6fcf643.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [employeeId, setEmployeeId] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!employeeId || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    // console.log(employeeId, password);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { employeeId, password },\r\n        config\r\n      );\r\n\r\n      // console.log(JSON.stringify(data));\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"Employee-ID\" isRequired>\r\n        <FormLabel>Employee ID</FormLabel>\r\n        <Input\r\n          value={employeeId}\r\n          placeholder=\"Enter Your Nassa Employee ID\"\r\n          onChange={(e) => setEmployeeId(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Register = () => {\r\n\r\n  const history = useHistory();\r\n  const [employeeId, setEmployeeId] = useState('');\r\n\r\n  const onChange = (e) => {\r\n    setEmployeeId(e.target.value);\r\n  }\r\n\r\n\r\n  const onSubmit = (e) => {\r\n\r\n    if (employeeId === '') {\r\n      alert('Please enter your employee id');\r\n      return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    const url = `http://lucid.nassa.com.bd/api/Employee/GetEmployeeById?employeeId=${employeeId}`;\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(data);\r\n        setEmployeeId(employeeId);\r\n        history.push(\"/signup\",\r\n          {\r\n            state:\r\n            {\r\n              employeeId: data.EmployeeId,\r\n              name: data.FullName,\r\n              email: data.OfficeEmail,\r\n              image: data.Image,\r\n              mobileNumber: data.MobileNo,\r\n            }\r\n          });\r\n      })\r\n  }\r\n\r\n  return (\r\n    <form action=\"\" onSubmit={(e) => onSubmit(e)}>\r\n      <VStack spacing=\"5px\">\r\n        <FormControl id=\"employee-id\" isRequired>\r\n          <FormLabel>Employee ID</FormLabel>\r\n          <Input\r\n            placeholder=\"Enter Your Nassa Employee ID\"\r\n            name=\"employeeId\"\r\n            value={employeeId}\r\n            onChange={onChange}\r\n          />\r\n        </FormControl>\r\n        <Button\r\n          colorScheme=\"blue\"\r\n          width=\"100%\"\r\n          style={{ marginTop: 15 }}\r\n          type=\"submit\"\r\n        >\r\n          Register\r\n        </Button>\r\n      </VStack>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Register from \"../components/Authentication/Register\";\r\n// import Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          N Chat\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Register</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Register />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\nimport Robot from '../animations/robot.gif';\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport Picker from \"emoji-picker-react\";\r\n\r\n\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://172.16.10.125:809\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n\r\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n  const handleEmojiPickerhideShow = () => {\r\n    setShowEmojiPicker(!showEmojiPicker);\r\n  };\r\n\r\n  const handleEmojiClick = (event, emojiObject) => {\r\n    let msg = newMessage;\r\n    msg += emojiObject.emoji;\r\n    setNewMessage(msg);\r\n  };\r\n\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <div style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"space-between\",\r\n            }}>\r\n              <IconButton\r\n                d={{ base: \"flex\", md: \"none\" }}\r\n                icon={<ArrowBackIcon />}\r\n                onClick={() => setSelectedChat(\"\")}\r\n              />\r\n\r\n\r\n              {messages &&\r\n                (!selectedChat.isGroupChat ? (\r\n                  <>\r\n                    {getSender(user, selectedChat.users)}\r\n                    <ProfileModal\r\n                      user={getSenderFull(user, selectedChat.users)}\r\n                    />\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    {selectedChat.chatName.toUpperCase()}\r\n                    <UpdateGroupChatModal\r\n                      fetchMessages={fetchMessages}\r\n                      fetchAgain={fetchAgain}\r\n                      setFetchAgain={setFetchAgain}\r\n                    />\r\n                  </>\r\n                ))}\r\n            </div>\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"93%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: 'flex-end',\r\n                overflowY: \"hidden\",\r\n                height: \"100%\",\r\n                width: \"100%\",\r\n                padding: \"0px 10px\",\r\n                backgroundColor: \"#E8E8E8\",\r\n              }}\r\n            >\r\n              {loading ? (\r\n                <Spinner\r\n                  size=\"xl\"\r\n                  w={20}\r\n                  h={20}\r\n                  alignSelf=\"center\"\r\n                  margin=\"auto\"\r\n                />\r\n              ) : (\r\n                <div className=\"messages\">\r\n                  <ScrollableChat messages={messages} />\r\n                </div>\r\n              )}\r\n\r\n              <FormControl\r\n                onKeyDown={sendMessage}\r\n                id=\"first-name\"\r\n                isRequired\r\n                mt={3}\r\n              >\r\n                {istyping ? (\r\n                  <div>\r\n                    <Lottie\r\n                      options={defaultOptions}\r\n                      // height={50}\r\n                      width={70}\r\n                      style={{ marginBottom: 15, marginLeft: 0 }}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <></>\r\n                )}\r\n                <div>\r\n\r\n                </div>\r\n                <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                  <div style={{\r\n                    margin: '10px 10px',\r\n                    fontSize: '25px',\r\n                    color: '#828282',\r\n                    cursor: 'pointer',\r\n                  }}>\r\n                    <i className=\"fa fa-smile icons\" onClick={handleEmojiPickerhideShow} />\r\n                    {showEmojiPicker && <Picker onEmojiClick={handleEmojiClick} />}\r\n                  </div>\r\n                  <Input\r\n                    variant=\"filled\"\r\n                    bg=\"#E0E0E0\"\r\n                    placeholder=\"Enter a message..\"\r\n                    value={newMessage}\r\n                    onChange={typingHandler}\r\n                  />\r\n                </div>\r\n              </FormControl>\r\n            </div>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <div\r\n          style={{\r\n            textAlign: \"center\",\r\n            height: '100%'\r\n          }}\r\n        >\r\n          <img src={Robot} alt=\"\" style={{ marginLeft: '30%' }} />\r\n          <h2 style={{ color: 'black', fontSize: '40px' }}> Welcome, <span style={{ color: 'green' }}>{user.name}</span></h2>\r\n          <h4 style={{ color: 'black', fontSize: '20px' }}> Please select a chat to start messaging.</h4>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  // ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  // Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  // Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={`http://lucid.nassa.com.bd/EmployeeImage/${user.employeeId}.jpg`} alt={user.name} style={{ borderRadius: '50%' }}\r\n            />\r\n            {/* <Text\r\n              fontSize={{ base: \"15px\", md: \"20px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text> */}\r\n          </ModalBody>\r\n          {/* <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter> */}\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","export default __webpack_public_path__ + \"static/media/robot.0617a419.gif\";","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n// import { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction, user }) => {\r\n  // const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box >\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","// import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\n// import { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <div style={{\r\n        base: selectedChat ? \"display: none\" : \"display: flex\",\r\n        alignItems: 'center',\r\n        padding: '3px',\r\n        width: '100%',\r\n        backgroundColor: 'white',\r\n        flexDirection: 'column',\r\n        borderRadius: 'lg',\r\n      }}>\r\n        <Box\r\n          pb={3}\r\n          px={3}\r\n          fontSize={{ base: \"28px\", md: \"30px\" }}\r\n          fontFamily=\"Work sans\"\r\n          d=\"flex\"\r\n          w=\"100%\"\r\n          justifyContent=\"space-between\"\r\n          alignItems=\"center\"\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              width: \"100%\",\r\n              paddingBottom: \"5px\",\r\n\r\n            }}\r\n          >\r\n            My Chats\r\n            <GroupChatModal>\r\n              {/* <Button\r\n              d=\"flex\"\r\n              fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n              rightIcon={<AddIcon />}\r\n            >\r\n              New Group Chat\r\n            </Button> */}\r\n            </GroupChatModal>\r\n          </div>\r\n        </Box>\r\n        <Box\r\n          d=\"flex\"\r\n          flexDir=\"column\"\r\n          p={3}\r\n          bg=\"#F8F8F8\"\r\n          w=\"100%\"\r\n          h=\"90%\"\r\n          borderRadius=\"lg\"\r\n        // overflowY=\"hidden\"\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              padding: \"5px\",\r\n              backgroundColor: \"#F8F8F8\",\r\n              width: \"100%\",\r\n              height: \"90%\",\r\n              borderRadius: \"lg\",\r\n              // overflowY: \"hidden\",\r\n            }}\r\n          >\r\n            {chats ? (\r\n              <Stack overflowY=\"scroll\">\r\n                {chats.map((chat) => (\r\n                  <Box\r\n                    onClick={() => setSelectedChat(chat)}\r\n                    cursor=\"pointer\"\r\n                    bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                    color={selectedChat === chat ? \"white\" : \"black\"}\r\n                    px={3}\r\n                    py={2}\r\n                    borderRadius=\"lg\"\r\n                    key={chat._id}\r\n                  >\r\n\r\n                    <Text\r\n                      fontSize={{ base: \"18px\", md: \"20px\" }}\r\n                    >\r\n                      {!chat.isGroupChat\r\n                        ? getSender(loggedUser, chat.users)\r\n                        : chat.chatName}\r\n                    </Text>\r\n                    {chat.latestMessage && (\r\n                      <Text fontSize=\"xs\">\r\n                        <b>{chat.latestMessage.sender.name} : </b>\r\n                        {chat.latestMessage.content.length > 50\r\n                          ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                          : chat.latestMessage.content}\r\n                      </Text>\r\n                    )}\r\n                  </Box>\r\n                ))}\r\n              </Stack>\r\n            ) : (\r\n              <ChatLoading />\r\n            )}\r\n          </div>\r\n        </Box>\r\n      </div >\r\n    </Box >\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\n// import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <Box\r\n      d=\"flex\"\r\n      justifyContent=\"space-between\"\r\n      alignItems=\"center\"\r\n      bg=\"white\"\r\n      w=\"100%\"\r\n      p=\"5px 10px 5px 10px\"\r\n      borderWidth=\"5px\"\r\n    >\r\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Nchat\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <img src={`http://lucid.nassa.com.bd/EmployeeImage/${user.employeeId}.jpg`} alt=\"\" style={{ height: '35px', width: '35px', borderRadius: '50%' }} />\r\n              {/* <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              /> */}\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </div>\r\n    </Box>\r\n\r\n    <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n      <DrawerOverlay />\r\n      <DrawerContent>\r\n        <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n        <DrawerBody>\r\n          <Box d=\"flex\" pb={2}>\r\n            <div style={{ display: 'flex', paddingBottom: '2px' }}>\r\n              <Input\r\n                placeholder=\"find by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Search</Button>\r\n            </div>\r\n          </Box>\r\n          {loading ? (\r\n            <ChatLoading />\r\n          ) : (\r\n            searchResult?.map((user) => (\r\n              <UserListItem\r\n                key={user._id}\r\n                user={user}\r\n                handleFunction={() => accessChat(user._id)}\r\n              />\r\n            ))\r\n          )}\r\n          {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n        </DrawerBody>\r\n      </DrawerContent>\r\n    </Drawer>\r\n  </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', width: '100%', height: '91vh' }}>\r\n          {user && <MyChats fetchAgain={fetchAgain} />}\r\n          {user && (\r\n            <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n          )}\r\n        </div>\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router\";\r\nimport {\r\n  Box,\r\n  Container,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst Signup = () => {\r\n\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const EmployeeInfo = location.state.state;\r\n  console.log(\"EmployeeInfo\", EmployeeInfo);\r\n\r\n\r\n  const [name, setName] = useState(EmployeeInfo.name);\r\n  const [employeeId, setEmployeeId] = useState(EmployeeInfo.employeeId);\r\n  const [email, setEmail] = useState(EmployeeInfo.email);\r\n  const [mobileNumber, setMobileNumber] = useState(EmployeeInfo.mobileNumber);\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n\r\n\r\n  const submitHandler = async () => {\r\n    if (!name || !employeeId || !email || !mobileNumber || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, employeeId, email, mobileNumber, password);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          employeeId,\r\n          email,\r\n          mobileNumber,\r\n          password,\r\n        },\r\n        config\r\n      );\r\n      console.log(\"Register\", data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          N Chat\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Text fontSize=\"4xl\">Signup</Text>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <VStack spacing=\"5px\">\r\n                <FormControl id=\"first-name\" isRequired>\r\n                  <FormLabel>Name</FormLabel>\r\n                  <Input\r\n                    placeholder=\"Enter Your Name\"\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    value={name}\r\n                    disabled={true}\r\n                  />\r\n                </FormControl>\r\n                <FormControl id=\"employee-id\" isRequired>\r\n                  <FormLabel>Employee ID</FormLabel>\r\n                  <Input\r\n                    placeholder=\"Enter Your Nassa Employee ID\"\r\n                    onChange={(e) => setEmployeeId(e.target.value)}\r\n                    value={employeeId}\r\n                    disabled={true}\r\n                  />\r\n                </FormControl>\r\n                <FormControl id=\"email\" isRequired>\r\n                  <FormLabel>Email Address</FormLabel>\r\n                  <Input\r\n                    type=\"email\"\r\n                    placeholder=\"Enter Your Email Address\"\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    value={email}\r\n                    disabled={true}\r\n                  />\r\n                </FormControl>\r\n                <FormControl id=\"mobile-number\" isRequired>\r\n                  <FormLabel>Mobile Number</FormLabel>\r\n                  <Input\r\n                    placeholder=\"Enter Your Mobile Number\"\r\n                    onChange={(e) => setMobileNumber(e.target.value)}\r\n                    value={mobileNumber}\r\n                    disabled={true}\r\n                  />\r\n                </FormControl>\r\n                <FormControl id=\"password\" isRequired>\r\n                  <FormLabel>Password</FormLabel>\r\n                  <InputGroup size=\"md\">\r\n                    <Input\r\n                      type={show ? \"text\" : \"password\"}\r\n                      placeholder=\"Enter Password\"\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                    />\r\n                    <InputRightElement width=\"4.5rem\">\r\n                      <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n                        {show ? \"Hide\" : \"Show\"}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <FormControl id=\"confirm-password\" isRequired>\r\n                  <FormLabel>Confirm Password</FormLabel>\r\n                  <InputGroup size=\"md\">\r\n                    <Input\r\n                      type={show ? \"text\" : \"password\"}\r\n                      placeholder=\"Confirm password\"\r\n                      onChange={(e) => setConfirmpassword(e.target.value)}\r\n                    />\r\n                    <InputRightElement width=\"4.5rem\">\r\n                      <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n                        {show ? \"Hide\" : \"Show\"}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <Button\r\n                  colorScheme=\"blue\"\r\n                  width=\"100%\"\r\n                  style={{ marginTop: 15 }}\r\n                  onClick={submitHandler}\r\n                >\r\n                  Sign Up\r\n                </Button>\r\n              </VStack>\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\nimport Signup from \"./components/Authentication/Signup\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n      <Route path=\"/signup\" component={Signup} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}